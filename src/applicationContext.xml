<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-4.0.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
	<!-- 扫描指定路径下所有@注解配置 
	<context:component-scan base-package="com.javatzxx.android" > -->
	<!-- 不扫描部分 
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>     
	</context:component-scan> 
	  -->
	<!-- 扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有@Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	 -->
	<!--  装载配置文件
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:datasource.properties</value>
			</list>
		</property>
	</bean>
 -->
	<!-- dataSource数据源 
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
		<!-- 连接数据库 四属性 
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		-->
		<!-- 配置初始化大小、最小、最大  
	    <property name="initialSize" value="1" />  
	    <property name="minIdle" value="1" />   
	    <property name="maxActive" value="20" />  
	   --> 
	    <!-- 配置获取连接等待超时的时间   
	    <property name="maxWait" value="60000" />  
	   -->
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	   --> 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  

	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	   	     -->
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小  
	    <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
	    -->
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计
	    <property name="filters" value="stat" />  
	</bean>
	 -->  
	<!-- spring框架集成hibernate4 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.javatzxx.android.entity</value>
			</list>
		</property>
	</bean>
	-->
	
	
	
	<!-- 事物管理器X  
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->
	<!-- 事务管理器
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
		 -->
	<!-- spring为拦截的方法绑定事物 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*"  />
		</tx:attributes>
	</tx:advice>-->
	<!-- 扫描包结构，拦截需要添加事物的方法 
	<aop:config proxy-target-class="true">
		<aop:pointcut id="managerOperation" expression="execution(* com.javatzxx.android.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="managerOperation" />
	</aop:config>
	-->
	<!-- 配置事务异常封装 
   <bean id="persistenceExceptionTranslationPostProcessor" 
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	-->
	</beans>